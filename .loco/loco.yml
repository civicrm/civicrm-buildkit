format: 'loco-0.1'

## This is the default configuration used for local development environments.
##
## You can modify the configuration with any of these techniques:
##  - Edit this file
##  - Add an adjacent file (`loco.overrides.yml`) or global file (`/etc/bknix-ci/loco.overrides.yml`)
##  - Add environment-variables to your shell configuration file (eg `~/.profile` or `~/.bashrc`)
##  - Manually set environment-variables when you open your shell (*before calling loco*)

#### General configuration
default_environment:

 ## HOSTS_TYPE: When creating an HTTP service, should we register the hostname in "/etc/hosts" ('file') or not ('none')?
 - HOSTS_TYPE=none
 # - HOSTS_TYPE=file

 ## HTTPD_*: Determine how a local folder (eg "./build/dmaster") relates to a local HTTP service (eg "http://dmaster.bknix:8001").
 - HTTPD_DOMAIN=${LOCALHOST}.nip.io
 - HTTPD_PORT=8001
 - HTTPD_VDROOT=$LOCO_PRJ/build
 - HTTPD_VISIBILITY=local

 ## *_PORT: Most daemons run on auxiliary/non-standard TCP/UDP ports.
 - MAIL_SMTP_PORT=1025
 - MAIL_HTTP_PORT=1080
 - MEMCACHED_PORT=12221
 - MYSQLD_PORT=3307
 - PHPFPM_PORT=9009
 - REDIS_PORT=6380

 ## XDEBUG_*: Enable or disable main XDebug options
 #- XDEBUG_MODE=off
 - XDEBUG_MODE=develop,debug
 - XDEBUG_PORT=9003
 #- XDEBUG_CONFIG=...

 ## RAMDISK_SIZE: Optionally store all runtime data (incl MySQL) in a ramdisk.
 - RAMDISK_SIZE=off
 # - RAMDISK_SIZE=600
 # 600mb is usually enough for 2-3 full dev environments, depending on CMS

 ## CIVICRM_LOCALES: When pre-generating CiviCRM datasets, limit the number of locales.
 - CIVICRM_LOCALES=en_US,fr_FR,de_DE

 ## CIVIBUILD_ADMIN_PASS: When creating an administrative user, set the default password.
 # - CIVIBUILD_ADMIN_PASS=admin

 ## LOCALHOST: Bind services to a local IP address.
 - LOCALHOST=127.0.0.1

 - CHROME_BIN=$(find-chrome)
 - CHROME_HOST=${LOCALHOST}
 - CHROME_PORT=9222
 

#### Mandatory environment settings
environment:
 # CLI applications should use our stuff
 - AMPHOME=$LOCO_VAR.keep/amp
 - CIVIBUILD_HOME=$HTTPD_VDROOT
 - BKIT=$LOCO_PRJ
 - BKITBLD=$HTTPD_VDROOT
 - MYSQL_HOME=$LOCO_VAR/mysql/current/conf
 - MYSQL_ID=$(mysql-id)
 - NODE_PATH=$BKIT/node_modules:$NODE_PATH
 - PATH=$BKIT/bin:$BKIT/node_modules/.bin:$LOCO_PRJ/.loco/bin:$PATH
 - CIVICRM_COMPOSER_ASSET=symdir
 - CIVICRM_L10N_SYMLINK=1

volume:
  ramdisk: $RAMDISK_SIZE

#### Functional service definitions
services:

  redis:
    run: 'redis-server --port "$REDIS_PORT" --bind "$LOCALHOST" --pidfile "$LOCO_SVC_VAR/redis.pid" --dir "$LOCO_SVC_VAR"'
    pid_file: '$LOCO_SVC_VAR/redis.pid'
    message: 'Redis is running on "<comment>$LOCALHOST:$REDIS_PORT</comment>".'

  memcached:
    enabled: false
    run: 'memcached --port=$MEMCACHED_PORT --pidfile="$LOCO_SVC_VAR/memcached.pid"'
    pid_file: '$LOCO_SVC_VAR/memcached.pid'
    message: 'Memcached is running on "<comment>$LOCALHOST:$MEMCACHED_PORT</comment>".'

  php-fpm:
    run: 'php-fpm -y "$LOCO_SVC_VAR/php-fpm.conf" --nodaemonize'
    pid_file: '$LOCO_SVC_VAR/php-fpm.pid'
    message: 'PHP-FPM is running on "<comment>$LOCALHOST:$PHPFPM_PORT</comment>"'
    io_mode: close-output
    ## We've been using default `close-all`, but on php-fpm exits immediately on macOS 15.3. `close-output` seems to work better.

  mailhog:
    run: 'loco-pid-file "$LOCO_SVC_VAR/mailhog.pid" -- MailHog -ui-bind-addr "$LOCALHOST:$MAIL_HTTP_PORT" -api-bind-addr "$LOCALHOST:$MAIL_HTTP_PORT" -smtp-bind-addr "$LOCALHOST:$MAIL_SMTP_PORT"'
    pid_file: '$LOCO_SVC_VAR/mailhog.pid'
    message: 'Mailhog is running on "<comment>smtp://$LOCALHOST:$MAIL_SMTP_PORT</comment>" and "<comment>http://$LOCALHOST:$MAIL_HTTP_PORT</comment>"'

  ## apache-vdr uses a "virtual document root" to host a wildcard domain;
  ## Formula: "http://{SUBDOMAIN}.{HTTPD_DOMAIN}:{HTTPD_PORT}/" <==> "./build/{SUBDOMAIN}/"
  ## Ex: "http://foobar.bknix:8001/" <==> "./build/foobar/"
  apache-vdr:
    init:
      - cp "$LOCO_SVC_CFG"/conf/magic "$LOCO_SVC_CFG"/conf/mime.types "$LOCO_SVC_VAR/conf"
      - mk-apache-links
      - 'if [ ! -d "$HTTPD_VDROOT" ]; then mkdir "$HTTPD_VDROOT"; fi'
    run: 'apachectl -d "$LOCO_SVC_VAR" -DFOREGROUND'
    pid_file: '$LOCO_SVC_VAR/httpd.pid'
    message: 'Apache HTTPD is running at "<comment>http://$LOCALHOST:$HTTPD_PORT</comment>" with content from "<comment>$HTTPD_VDROOT</comment>".'

  mysql:
    enabled: true
    init:
      - 'loco-mysql-init'
    run: 'loco-mysql-run'
    pid_file: '$LOCO_SVC_VAR/current/run/mysql.pid'
    message: |-
      MySQL is running on "<comment>$LOCALHOST:$MYSQLD_PORT</comment>". The default credentials are user="<comment>root</comment>" and password="".
        URL: <comment>mysql://root:@$LOCALHOST:$MYSQLD_PORT</comment>

  ## Load timezone data into MySQL.
  ## IMHO, it would make more sense to use `mysqld --init-file`... but it's futzy (across versions).
  ## Many `mysql.com` versions have very limited syntax ("\n" handling). `mariadb` doesn't even seem to read the file...
  mysql-tz:
    init:
      - 'loco-mysql-wait 300 && mysql_tzinfo_to_sql "$TZDIR" | mysql mysql'
    message: 'MySQL has timezone data from "<comment>$TZDIR</comment>".'

  ## NOTE: This a non-service setup task. Strictly speaking, it also runs in install-{ci,developer}.sh, but we keep it
  ## here so that it reruns automatically - which should help if a dev-user is twiddling the ports.
  buildkit:
    init:
      - 'loco-buildkit-init'
    message: 'Buildkit (<comment>$BKIT</comment>) is configured to use these services. It produces builds in "<comment>$HTTPD_VDROOT</comment>".'

  ## Chrome is trickier - the choice of how to start depends a lot on context.
  chrome:
    enabled: false
    run: 'loco-pid-file "$LOCO_SVC_VAR/chrome.pid" -- "$CHROME_BIN" --remote-debugging-address="$CHROME_HOST" --remote-debugging-port="$CHROME_PORT"'
    pid_file : '$LOCO_SVC_VAR/chrome.pid'
    message: 'Chrome (UI) is running on "<comment>http://$CHROME_HOST:$CHROME_PORT</comment>" to support automated testing.'

  chrome-headless:
    enabled: false
    run: 'loco-pid-file "$LOCO_SVC_VAR/chrome-headless.pid" -- "$CHROME_BIN" --disable-gpu --headless --remote-debugging-address="$CHROME_HOST" --remote-debugging-port="$CHROME_PORT"'
    pid_file : '$LOCO_SVC_VAR/chrome-headless.pid'
    message: 'Chrome (headless) is running on "<comment>http://$CHROME_HOST:$CHROME_PORT</comment>" to support automated testing.'
