#!/usr/bin/env bash

###############################################################################
## Bootstrap

## Determine the absolute path of the directory with the file
## usage: absdirname <file-path>
function absdirname() {
  pushd $(dirname $1) >> /dev/null
    pwd
  popd >> /dev/null
}

BINDIR=$(absdirname "$0")
PRJDIR=$(dirname "$BINDIR")
PHPCS_STD="$PRJDIR/vendor/drupal/coder/coder_sniffer/Drupal"
CHECKSTYLE_OUT=
CHECKSTYLE_TMPDIR=
FILELIST=
EXITCODE=
TMP=

###############################################################################
## Function library

function show_help() {
  echo "usage: civilint [--checkstyle <output-dir>] [file1 file2...]"
  echo
  echo "If \"files\" is omitted, scan any uncommitted changes from git."
  echo "If \"files\" is \"-\", scan any files listed on STDIN"
}

## output a list of files which have been changed (according to git)
function git_default_files() {
  git diff --name-only
  git diff --name-only --cached
}

## Split files into categories (PHP-files, JS-files, CSS-files, skip-files).
## usage: cat file-list.txt | split_files phpfiles.txt jsfiles.txt cssfiles.txt skipfiles.txt
function split_files() {
  local phpfiles="$1"
  local jsfiles="$2"
  local cssfiles="$3"
  local skipfiles="$4"

  local check_traits=$(php -r 'echo version_compare(PHP_VERSION, "5.4.0", ">=") ? "1" : "0";')

  touch "$phpfiles" "$jsfiles" "$cssfiles" "$skipfiles"

  while read file; do
    if [ ! -e "$file" ]; then
      echo "$file" >> "$skipfiles"

    elif [[ "$file" =~ (/?examples/|/?tools/) ]]; then
      echo "$file" >> "$skipfiles"

    elif [[ "$file" =~ Trait\.php$ ]]; then
      if [ "x$check_traits" = "x1" ]; then
        echo "$file" >> "$phpfiles"
      else
        echo "WARNING: Cannot check style on $file with PHP 5.3. Consider upgrading PHP."
        echo "$file" >> "$skipfiles"
      fi

    elif [[ "$file" =~ (/SchemaStructure\.php|langs\.php) ]]; then
      echo "$file" >> "$skipfiles"

    elif [[ "$file" =~ \.php$ ]]; then
      echo "$file" >> "$phpfiles"

    elif [[ "$file" =~ \.js$ ]]; then
      echo "$file" >> "$jsfiles"

    elif [[ "$file" =~ \.css$ ]]; then
      echo "$file" >> "$cssfiles"

    elif [[ "$file" =~ \.tpl$ ]]; then
      echo "$file" >> "$skipfiles"

    elif [[ "$file" =~ \.template$ ]]; then
      echo "$file" >> "$skipfiles"

    ## e.g. <?php or #!/usr/bin/php or #!/usr/bin/env php
    elif head -n1 "$file" | grep '\(\?php\|#!.*bin/php\|#!.*env php\)' -q ; then
      echo "$file" >> "$phpfiles"

    else
      echo "$file" >> "$skipfiles"
    fi
  done
}

## Check all files in a set
## cat filelist.txt| php_check_files
function php_check_files() {
  TOTAL=0
  INVALID=0
  while read f ; do
    ((TOTAL++))
    if ! php -l "$f" ; then
      ((INVALID++))
    fi | grep -v 'No syntax errors detected in'
  done
}

## usage: mydir=$(mktempdir)
function mktempdir() {
  php -r '$f = tempnam(sys_get_temp_dir(), "civilint.tmp.d"); unlink($f); mkdir($f); chmod($f, 0700); echo "$f\n"; '
}

function cleanup() {
  if [ -n "$TMP" -a -d "$TMP" ]; then
    rm -rf "$TMP"
  fi
}

## usage: show_files "Prefix: " <file-list.txt>
function show_files() {
  if grep -q . "$2" ; then
    echo "$1"
    cat "$2" | while read f ; do
      echo " * $f"
    done
  fi
}

###############################################################################
## Main

trap cleanup 0

## Determine output mode
if [ "$1" == "--checkstyle" ]; then
  CHECKSTYLE_OUT="$2"
  shift 2
fi

## Capture the list of files
TMP=$(mktempdir)
if [ -z "$1" ]; then
  GITROOT=$(git rev-parse --show-toplevel)
  if [ -d "$GITROOT" ]; then
    cd "$GITROOT"
  else
    echo "ERROR: Cannot check for uncommitted changes in git. Please change to the git root."
    echo
    show_help
    exit 2
  fi
  git_default_files | split_files "$TMP/php.txt" "$TMP/js.txt" "$TMP/css.txt" "$TMP/skip.txt"
elif [ "$1" == "-" ]; then
  split_files "$TMP/php.txt" "$TMP/js.txt" "$TMP/css.txt" "$TMP/skip.txt"
elif [ "$1" == "-h" ]; then
  show_help
  exit 0
else
  for f in "$@" ; do
    echo $f
  done | split_files "$TMP/php.txt" "$TMP/js.txt" "$TMP/css.txt" "$TMP/skip.txt"
fi

if cat "$TMP/php.txt" "$TMP/js.txt" "$TMP/css.txt" "$TMP/skip.txt" | grep -q  . ;then
  echo "===========================[ Identify Files ]==========================="
  show_files "PHP Files:" "$TMP/php.txt"
  show_files "Javascript Files:" "$TMP/js.txt"
  show_files "CSS Files:" "$TMP/css.txt"
  show_files "Skip Files:" "$TMP/skip.txt"
fi

## Run PHPCS
PHPCS_EXIT=0
PHPL_EXIT=0
if grep -q . "$TMP/php.txt" ; then
  echo "===============================[ php -l ]==============================="
  php_check_files < "$TMP/php.txt" > "$TMP/php-check.log"
  if grep -q . "$TMP/php-check.log" ; then
    PHPL_EXIT=1
    cat "$TMP/php-check.log"
  fi

  echo "===============================[ phpcs  ]==============================="
  if [ $PHPL_EXIT != 0 ]; then
    echo "Skipping style check. There are files with hard syntax errors."
    ## In the past, had a bug where phpcs runs into infinite-loop checking a malformed file.
    PHPCS_EXIT=1
  elif [ -n "$CHECKSTYLE_OUT" ]; then
    xargs $BINDIR/phpcs --standard="$PHPCS_STD" --report=checkstyle < "$TMP/php.txt" > "$CHECKSTYLE_OUT/checkstyle-phpcs.xml"
    PHPCS_EXIT=$?
  else
    xargs $BINDIR/phpcs --standard="$PHPCS_STD" < "$TMP/php.txt"
    PHPCS_EXIT=$?
  fi
fi

## Run PHPCS (CSS files)
PHPCS_CSS_EXIT=0
if grep -q . "$TMP/css.txt" ; then
  echo "=============================[ phpcs (css) ]============================"
  if [ -n "$CHECKSTYLE_OUT" ]; then
    xargs $BINDIR/phpcs --standard="$PHPCS_STD" --report=checkstyle < "$TMP/css.txt" > "$CHECKSTYLE_OUT/checkstyle-phpcs-css.xml"
    PHPCS_CSS_EXIT=$?
  else
    xargs $BINDIR/phpcs --standard="$PHPCS_STD" < "$TMP/css.txt"
    PHPCS_CSS_EXIT=$?
  fi
fi

## Run jshint
JSHINT_EXIT=0
if grep -q . "$TMP/js.txt" ; then
  echo "===============================[ jshint ]==============================="
  if [ -n "$CHECKSTYLE_OUT" ]; then
    xargs $BINDIR/jshint --reporter=checkstyle < "$TMP/js.txt" > "$CHECKSTYLE_OUT/checkstyle-jshint.xml"
    JSHINT_EXIT=$?
  else
    xargs $BINDIR/jshint --verbose < "$TMP/js.txt"
    JSHINT_EXIT=$?
  fi
fi

CIVISTRINGS_EXIT=0
if grep -q . "$TMP/js.txt" "$TMP/php.txt" ; then
  echo "============================[ civistrings ]============================="
  cat  "$TMP/js.txt" "$TMP/php.txt" | ( xargs $BINDIR/civistrings 2>&1 ) | grep '^\[warn' > "$TMP/civistrings-check.log"
  if grep -q . "$TMP/civistrings-check.log" ; then
    CIVISTRINGS_EXIT=1
    cat "$TMP/civistrings-check.log"
  fi
fi

## Finish up
if [ "$PHPCS_EXIT" -gt 0 -o "$PHPL_EXIT" -gt 0 ]; then
  echo >&2 "Found PHP errors"
fi
if [ "$PHPCS_CSS_EXIT" -gt 0 ]; then
  echo >&2 "Found CSS errors"
fi
if [ "$JSHINT_EXIT" -gt 0 ]; then
  echo >&2 "Found JS errors"
fi
if [ "$CIVISTRINGS_EXIT" -gt 0 ]; then
  echo >&2 "Found civistrings errors"
fi
if [ "$PHPCS_EXIT" -gt 0 -o "$PHPL_EXIT" -gt 0 -o "$PHPCS_CSS_EXIT" -gt 0 -o "$JSHINT_EXIT" -gt 0 -o "$CIVISTRINGS_EXIT" -gt 0 ]; then
  exit 1
fi
